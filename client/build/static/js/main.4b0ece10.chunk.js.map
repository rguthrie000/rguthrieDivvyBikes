{"version":3,"sources":["utils/timeSvcs.js","utils/tripsAPI.js","utils/geoMath.js","components/SearchForm.js","components/MapCard.js","App.js","registerServiceWorker.js","index.js"],"names":["DSTfuture","module","exports","getTimeStr","t","Date","now","d","toUTCString","slice","getTimeFlags","tStr","tArr","split","wkDay","hr","isMorning","isAfternoon","isEvening","isWeekday","makeLocalTime","UTC","tzDelta","dateTime","year","monthNameShort","month","monthName","dayOfMonth","dayOfWeek","todArr","hour","minute","second","tripsAPI","getStations","cb","axios","get","then","res","stationArr","data","forEach","s","push","stationId","stationName","docks","stationLat","stationLon","catch","err","console","log","getTrips","post","divvyBox","latLo","latHi","lonLo","lonHi","geoMath","randLat","Math","random","randLon","divvyLimits","findClosestStation","lat","lon","list","dArr","map","pow","min","minIndex","i","length","minDist","sqrt","PI","SearchForm","props","react_default","a","createElement","Fragment","id","timeAndDate","partOfDay","className","onClick","whereAmI","value","title","name","type","placeholder","onChange","handleFormChange","author","minStationDist","subject","startStation","startName","endStation","endName","checked","useTime","handleRadio","useProfile","AnyReactComponent","_ref","text","style","color","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","transform","SimpleMap","lib_default","bootstrapURLKeys","key","defaultCenter","this","center","defaultZoom","zoom","MapCard_AnyReactComponent","lng","React","Component","defaultProps","MapCard","App","_useState","useState","populated","startIndex","endIndex","latitude","longitude","_useState2","Object","slicedToArray","stations","setStations","_useState3","_useState4","searchOptions","setSearchOptions","_useState5","timeStr","_useState6","setTimeAndDate","setStationsList","closestStation","objectSpread","clock","flagsObj","useEffect","setInterval","components_SearchForm","toPrecision","event","preventDefault","updateStations","target","defineProperty","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4b0ece10.chunk.js","sourcesContent":["// timeSvcs - utilities for working with time in the Bike Planner\r\n//\r\n//\r\n//\r\n//\r\n//\r\n\r\n// const DSTpast = [\r\n//   1520755200000,  // '2018-03-11T08:00',\r\n//   1541314800000,  // '2018-11-04T07:00',\r\n//   1552204800000,  // '2019-03-10T08:00',\r\n//   1572764400000,  // '2019-11-03T07:00'\r\n// ];\r\nconst DSTfuture = [\r\n  1583654400000,  // '2020-03-08T08:00',\r\n  1604214000000   // '2020-11-01T07:00',\r\n];\r\n\r\nmodule.exports = {\r\n\r\n  getTimeStr : () => {\r\n  let t = Date.now();\r\n  if (t < DSTfuture[0]) {t -= 6*60*60000;} else\r\n  if (t < DSTfuture[1]) {t -= 5*60*60000;}\r\n  let d = new Date(t);\r\n  d = d.toUTCString();\r\n  return(d.slice(0,25) + ' CT');\r\n},\r\n\r\ngetTimeFlags : (tStr) => {\r\n//  0    1  2   3      4     5 \r\n// Mon, 24 Feb 2020 14:37:02 CT\r\n  let tArr = tStr.split(' ');\r\n  let wkDay = false;\r\n  switch (tArr[0])\r\n  {\r\n    case \"Mon,\":\r\n    case \"Tue,\":\r\n    case \"Wed,\":\r\n    case \"Thu,\":\r\n    case \"Fri,\": wkDay =  true; break;\r\n    case \"Sat,\": \r\n    case \"Sun,\": wkDay = false; break;\r\n    default: break;\r\n  }\r\n  let todArr = tArr[4].split(':');\r\n  let hr = todArr[0];\r\n  let isMorning   = false;\r\n  let isAfternoon = false;\r\n  let isEvening   = false;\r\n  if (hr <  5) {isEvening   = true;} else \r\n  if (hr < 12) {isMorning   = true;} else\r\n  if (hr < 19) {isAfternoon = true;} else \r\n               {isEvening   = true;}\r\n  return({\r\n    isWeekday   : wkDay, \r\n    isMorning   : isMorning,\r\n    isAfternoon : isAfternoon,\r\n    isEvening   : isEvening\r\n  });\r\n\r\n},\r\n\r\n// makeLocalTime() uses the javascript Date and toUTCString() functions\r\n// to provide elements of date and time, as listed here for var\r\n// dateAndTime.\r\nmakeLocalTime : (UTC,tzDelta) => {\r\n// var dateAndTime =\r\n// {\r\n//   year           : \"\",\r\n//   month          : \"\",\r\n//   monthName      : \"\",\r\n//   monthNameShort : \"\",\r\n//   dayOfMonth     : \"\",\r\n//   dayOfWeek      : \"\",\r\n//   hour           : \"\",\r\n//   minute         : \"\",\r\n//   second         : \"\"\r\n// }\r\n\r\n  var dateTime = {};  // output buffer\r\n  var dateObj = new Date(1000 * (UTC+tzDelta)); // Javascript toUTCString() method can be\r\n  var tString = dateObj.toUTCString();          // given a UTC-compliant time in milliseconds\r\n                                                // and will produce a string like this: \r\n                                                // \"Fri, 13 Dec 2019 07:00:00 GMT\"\r\n  var tArr = tString.split(\" \"); // which we break apart at the spaces\r\n  dateTime.year = tArr[3];\r\n  dateTime.monthNameShort = tArr[2];\r\n  switch (tArr[2])\r\n  {\r\n    case \"Jan\": dateTime.month =  1; dateTime.monthName =   \"January\"; break;\r\n    case \"Feb\": dateTime.month =  2; dateTime.monthName =  \"February\"; break;\r\n    case \"Mar\": dateTime.month =  3; dateTime.monthName =     \"March\"; break;\r\n    case \"Apr\": dateTime.month =  4; dateTime.monthName =     \"April\"; break;\r\n    case \"May\": dateTime.month =  5; dateTime.monthName =       \"May\"; break;\r\n    case \"Jun\": dateTime.month =  6; dateTime.monthName =      \"June\"; break;\r\n    case \"Jul\": dateTime.month =  7; dateTime.monthName =      \"July\"; break;\r\n    case \"Aug\": dateTime.month =  8; dateTime.monthName =    \"August\"; break;\r\n    case \"Sep\": dateTime.month =  9; dateTime.monthName = \"September\"; break;\r\n    case \"Oct\": dateTime.month = 10; dateTime.monthName =   \"October\"; break;\r\n    case \"Nov\": dateTime.month = 11; dateTime.monthName =  \"November\"; break;\r\n    case \"Dec\": dateTime.month = 12; dateTime.monthName =  \"December\"; break;\r\n    default: break;\r\n  }\r\n  dateTime.dayOfMonth = tArr[1];\r\n  switch (tArr[0])\r\n  {\r\n    case \"Mon,\": dateTime.dayOfWeek =    \"Monday\"; break;\r\n    case \"Tue,\": dateTime.dayOfWeek =   \"Tuesday\"; break;\r\n    case \"Wed,\": dateTime.dayOfWeek = \"Wednesday\"; break;\r\n    case \"Thu,\": dateTime.dayOfWeek =  \"Thursday\"; break;\r\n    case \"Fri,\": dateTime.dayOfWeek =    \"Friday\"; break;\r\n    case \"Sat,\": dateTime.dayOfWeek =  \"Saturday\"; break;\r\n    case \"Sun,\": dateTime.dayOfWeek =    \"Sunday\"; break;\r\n    default: break;\r\n  }\r\n  var todArr = tArr[4].split(\":\");  \r\n  dateTime.hour   = todArr[0];\r\n  dateTime.minute = todArr[1];\r\n  dateTime.second = todArr[2];\r\n  return(dateTime);\r\n}\r\n}\r\n\r\n","// tripServer.js - client-side interface to our server\r\n// for retrieval of User info, Stations, and Trips.\r\nimport axios from \"axios\";\r\n// import {debug} from \"../debug\";\r\n\r\nfunction getStations(cb) {\r\n  axios.get('/api/stations').then( (res) => { \r\n      let stationArr = [];\r\n      res.data.forEach( (s) => {\r\n        stationArr.push({\r\n          stationId   : s.stationId,\r\n          stationName : s.stationName,\r\n          docks       : s.docks, \r\n          stationLat  : s.stationLat,\r\n          stationLon  : s.stationLon\r\n        });\r\n      })\r\n      cb(stationArr);\r\n  })\r\n  .catch( (err) => console.log(err));\r\n}\r\n\r\n// getTrips() uses volumeId from one of the volumes found by\r\n// getBooks(). as such, volumeId does not need validation.\r\nfunction getTrips() {\r\n  axios.post(\"/api/trips\", {\r\n    // expected elements in req.body:\r\n    //   startStation\r\n    //   endStation\r\n    //   useStartTime, and if 1:\r\n    //     startTime\r\n    //     startTol\r\n    //   useGenderMale, and if 1:\r\n    //     genderMale\r\n    //   useBirthYear, and if 1:\r\n    //     birthYear\r\n    //     ageTol\r\n  }).then( () => {\r\n\r\n  })\r\n}\r\n\r\nexport default {getStations, getTrips};","// import {debug} from \"../debug\";\r\n\r\nconst divvyBox = {\r\n  latLo :  41.736646,\r\n  latHi :  42.064854,\r\n  lonLo : -87.774704,\r\n  lonHi : -87.549386\r\n};\r\n\r\nexport default {\r\n    \r\n  randLat : () => (divvyBox.latLo + Math.random()*(divvyBox.latHi - divvyBox.latLo)),\r\n\r\n  randLon : () => (divvyBox.lonLo + Math.random()*(divvyBox.lonHi - divvyBox.lonLo)),\r\n\r\n  divvyLimits : () => divvyBox,\r\n\r\n  findClosestStation(lat,lon,list) {\r\n    let dArr = list.map((s) => ((s.stationLat-lat)**2+(s.stationLon-lon)**2));\r\n    let min = 1e6;\r\n    let minIndex = -1;\r\n    for (let i = 0; i < dArr.length; i++) {\r\n      if (dArr[i] < min) {\r\n        minIndex = i;\r\n        min = dArr[i];\r\n      }\r\n    }\r\n    min = Math.sqrt(min)*(Math.PI/180.0)*3957.66;\r\n    return({minIndex: minIndex, minDist: min});\r\n  }\r\n\r\n};","import React from \"react\";\nimport \"./SearchForm.css\";\n\nfunction SearchForm(props) {\n  return (\n    <>\n      <h6 id=\"timedate\">{props.timeAndDate}</h6><h6 id=\"timecat\">{props.isWeekday? 'weekday':'weekend'}, {props.partOfDay}</h6>\n    <div id=\"search-box\">\n        <div>\n          <div id=\"button-random\">\n            <button className=\"btn btn-primary button-search\" onClick={props.whereAmI}>random</button>\n          </div>  \n            <div\n            id=\"position-lat\"\n            className=\"number-box\"\n            value={props.title}\n            name=\"position-lat\"\n            type=\"text\"\n            placeholder={props.lat}\n            onChange={props.handleFormChange}\n            ></div>\n            <div\n            id=\"position-lon\"\n            className=\"number-box\"\n            value={props.author}\n            name=\"position-lon\"\n            type=\"text\"\n            placeholder={props.lon}\n            onChange={props.handleFormChange}\n            ></div>\n        </div>\n        <p id=\"minDistance\">{props.minStationDist} miles to:</p>\n        <div>\n            <div id=\"start-station-id\"></div>\n            <div\n            id=\"start-station\"\n            className=\"number-box\"\n            value={props.subject}\n            name=\"start-station\"\n            type=\"text\"\n            placeholder={props.startStation+props.startName}\n            onChange={props.handleFormChange}\n            ></div>\n        </div>\n        <div>\n            <div id=\"end-station-id\"></div>\n            <input\n            id=\"end-station\"\n            className=\"form-input\"\n            value={props.subject}\n            name=\"end-station\"\n            type=\"text\"\n            placeholder={props.endStation+props.endName}\n            onChange={props.handleFormChange}\n            />\n        </div>\n    </div>\n        <div id=\"radio-box-time\">\n          <p>Use day and time?</p>\n          <div className=\"form-check-inline\">\n            <label>\n              <input\n                type=\"radio\"\n                name=\"useTime\"\n                value=\"yes\"\n                className=\"form-check-input\"\n                checked={props.useTime}\n                onChange={props.handleRadio}\n              />\n              yes\n            </label>\n          </div>\n          <div className=\"form-check-inline\">\n            <label>\n              <input\n                type=\"radio\"\n                name=\"useTime\"\n                value=\"no\"\n                className=\"form-check-input\"\n                checked={!props.useTime}\n                onChange={props.handleRadio}\n              />\n              no\n            </label>\n          </div>\n        </div>\n        <div id=\"radio-box-profile\">\n          <p>Use user profile?</p>\n          <div className=\"form-check-inline\">\n            <label>\n              <input\n                type=\"radio\"\n                name=\"useProfile\"\n                value=\"yes\"\n                className=\"form-check-input\"\n                checked={props.useProfile}\n                onChange={props.handleRadio}\n              />\n              yes\n            </label>\n          </div>\n          <div className=\"form-check-inline\">\n            <label>\n              <input\n                type=\"radio\"\n                name=\"useProfile\"\n                value=\"no\"\n                className=\"form-check-input\"\n                checked={!props.useProfile}\n                onChange={props.handleRadio}\n              />\n              no\n            </label>\n          </div>\n        </div>\n    </>\n  );\n}\n\nexport default SearchForm;\n","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport \"./MapCard.css\";\n\nconst AnyReactComponent = ({ text }) => (\n  <div style={{\n    color: 'white', \n    background: 'grey',\n    padding: '15px 10px',\n    display: 'inline-flex',\n    textAlign: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '100%',\n    transform: 'translate(-50%, -50%)'\n  }}>\n    {text}\n  </div>\n);\n\nclass SimpleMap extends React.Component {\n  static defaultProps = {\n    center: {lat: 41.90075, lng: -87.662045},\n    zoom: 10\n  };\n\n  render() {\n    return (\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyAcAthdRfN4aH4z75JtzKI3UXDFZxmw_V4' }}\n        defaultCenter={this.props.center}\n        defaultZoom={this.props.zoom}\n      >\n        <AnyReactComponent \n          lat={41.876511229} \n          lng={-87.62054801} \n          text={'Buckingham Fountain'} \n        />\n      </GoogleMapReact>\n    );\n  }\n}\n\nfunction MapCard(props) {\n  return (\n    <div id=\"map\" className=\"card mapcard\" style={{width: '100%', height: '800px'}}>\n      <SimpleMap/>\n    </div>\n  );\n}\n\nexport default MapCard;\n","import React, {useState, useEffect} from \"react\";\n// import mapAPI                       from \"./utils/googleAPI\";\nimport tripsAPI                     from \"./utils/tripsAPI\";\nimport geoMath                      from \"./utils/geoMath\";\nimport SearchForm                   from \"./components/SearchForm\";\nimport MapCard                      from \"./components/MapCard\";\nimport {getTimeStr, getTimeFlags}   from \"./utils/timeSvcs\";\n// import {debug}                      from \"./debug\";\nimport \"./App.css\";\n\n// On 'Demo Go!'\n// 1. Randomized location over city area. Then pick closest station.\n// 2. 2nd Randomized location over city area. Then pick closest station.\n// 3. Time -- now, weekday morning, weekday afternoon, weekday evening, weekend/holiday day, weekend/holiday evening\n// 4. fetch route for start/dest\n// 5. fetch actuals from server - recent and near future days in category (weekday or weekend/holiday)\n// 6. build and chart statistics - compare to Google's answer.\n\n\nfunction App() {\n\n\n//******************\n//*   State Data   *\n//******************\n  \n\n  // Station list. A station:\n  // {\n  //   stationId   : < one of 611 numbers in 2..673 (not all values are used) >\n  //   stationName : < string, descriptive of station location, e.g. an intersection or landmark>\n  //   docks       : < bikes capacity >\n  //   stationLat  : < latitude, a real number in 41.736646 - 42.064854, numbers are larger going North>\n  //   stationLon  : < longitude, a real number in -87.774704 - -87.54938625, numbers are more negative going West>\n  // }   \n  const [stations,setStations] = useState({\n    populated      : 0,\n    startIndex     : 0,\n    endIndex       : 1,\n    list           : [],\n    latitude       : geoMath.randLat(),\n    longitude      : geoMath.randLon(),\n    minStationDist : 0.0\n  });\n\n  const [searchOptions,setSearchOptions] = useState({\n      useTime    : false,\n      useProfile : false\n  });\n\n  const [timeAndDate,setTimeAndDate] = useState({\n    timeStr     : '',\n    isWeekday   : 0,\n    isMorning   : 0,\n    isAfternoon : 0,\n    isEvening   : 0\n  });\n\n//******************\n//*   Functions    *\n//******************\n  \n  // When ready...\n  useEffect( () => {\n      if (!stations.list.length) {\n        setInterval(clock,1000);\n        tripsAPI.getStations(setStationsList);\n      }\n      \n    },\n    // no monitoring  \n    []\n  );      \n\n  function setStationsList(stationArr) {\n    let closestStation = geoMath.findClosestStation(stations.latitude,stations.longitude,stationArr);\n    setStations({\n      ...stations,\n      populated      : stations.populated + 1, \n      list           : stationArr,\n      minStationDist : closestStation.minDist,\n      startIndex     : closestStation.minIndex\n    });\n  }\n\n  function updateStations(lat,lon,list) {\n    let closestStation = geoMath.findClosestStation(lat,lon,list);\n    setStations({\n      ...stations,\n      latitude       : lat,\n      longitude      : lon,\n      minStationDist : closestStation.minDist,\n      startIndex     : closestStation.minIndex\n    });  \n  }\n\n  function whereAmI(event) {\n    event.preventDefault();\n    let lat = geoMath.randLat();\n    let lon = geoMath.randLon();\n    updateStations(lat,lon,stations.list);\n    // let closestStation = geoMath.findClosestStation(lat,lon,stations.list);\n    // if (debug) {console.log(`lat,lon ${lat},${lon} is ${closestStation.minDist} from station ${stations.list[closestStation.minIndex].stationId}`)}\n    // setStations({\n    //   ...stations,\n    //   latitude       : lat,\n    //   longitude      : lon,\n    //   minStationDist : closestStation.minDist,\n    //   startIndex     : closestStation.minIndex\n    // });  \n  }\n\n  function clock() { \n    let tStr = getTimeStr();\n    let flagsObj = getTimeFlags(tStr);\n    setTimeAndDate({\n      timeStr     : tStr,\n      isWeekday   : flagsObj.isWeekday,\n      isMorning   : flagsObj.isMorning,\n      isAfternoon : flagsObj.isAfternoon,\n      isEvening   : flagsObj.isEvening\n    });\n  }\n\n  function handleRadioToggle(event) {\n    event.preventDefault();\n    let name = event.target.name;\n    let value = event.target.value;\n    setSearchOptions({\n      ...searchOptions,\n      [name] : value === 'yes' ? true : false\n    })\n  };\n\nreturn (\n    <div className=\"container AppBar\">\n      <div className=\"row AppBar-header\">\n        <div id=\"nameBox\">\n            <h5>rguthrie's</h5>\n            <h4>Divvy Bikes Planner</h4>\n        </div>\n        <h1 className=\"AppBar-title\">Bike Chicago!</h1>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-sm-4\">\n          <div className=\"row info-card\">\n            <SearchForm\n              timeAndDate    ={timeAndDate.timeStr}\n              isWeekday      ={timeAndDate.isWeekday}\n              partOfDay      ={timeAndDate.isMorning?'morning':(timeAndDate.isEvening?'evening':'afternoon')}\n              lat            ={stations.latitude.toPrecision(8)}\n              lon            ={stations.longitude.toPrecision(8)}\n              startStation   ={stations.populated? stations.list[stations.startIndex].stationId   : ''}\n              startName      ={stations.populated? stations.list[stations.startIndex].stationName : ''}\n              endStation     ={stations.populated? stations.list[stations.endIndex  ].stationId   : ''}\n              endName        ={stations.populated? stations.list[stations.endIndex  ].stationName : ''}\n              minStationDist ={stations.minStationDist.toPrecision(3)}\n              useTime        ={searchOptions.useTime}\n              useProfile     ={searchOptions.useProfile}\n              whereAmI       ={whereAmI}\n              handleRadio    ={handleRadioToggle}\n            />\n          </div>\n          <div className=\"row card\">\n          </div>\n        </div>\n        <div className=\"col-sm-8\">\n            {/* <MapCard /> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}